---
title: "data processing 2"
format: html
editor: visual
---

## Task

Adding another batch of files.

## Greek

task: speaker 1-4, add all emotions' 17 sentences (bc 10, 12, 14 already exist)

```{r}
# ==== 0) SET YOUR PATHS ====
source_dir <- "C:/Users/yuka/Desktop/QP1/AESDD"
target_dir <- "C:/Users/yuka/Desktop/linguist245B_project/experiment/stim/additional_items_temploc"


# ==== 1) CONFIGURATION ====
# which sub-folders to use:
emotion_folders <- list(
  a = "anger",
  f = "fear",
  h = "happiness",
  s = "sadness"
)
# corresponding prefixes:
emotion_prefix <- list(
  a = "angry__",
  f = "fear__",
  h = "happy__",
  s = "sad__"
)

# sentences to skip, speakers to keep
exclude_sentences <- c(10, 12, 14)
include_speakers  <- 1:4

# ==== 2) PROCESS ====
for (letter in names(emotion_folders)) {
  folder_path <- file.path(source_dir, emotion_folders[[letter]])
  if (!dir.exists(folder_path)) next

  # list everything, then pick only .wav
  all_files <- list.files(folder_path, full.names = TRUE)
  wavs <- all_files[tolower(tools::file_ext(all_files)) == "wav"]

  for (wav in wavs) {
    fname      <- basename(wav)                        # "s05 (2).wav"
    no_ext     <- tools::file_path_sans_ext(fname)     # "s05 (2)"
    n          <- nchar(no_ext)

    # must be exactly 7 chars: 1 + 2 digits + " " + "(" + digit + ")"
    if (n != 7)                  next
    if (substr(no_ext, 1, 1)     != letter) next       # right emotion code
    if (substr(no_ext, 4, 4)     != " ")    next       # space
    if (substr(no_ext, 5, 5)     != "(")    next
    if (substr(no_ext, 7, 7)     != ")")    next

    # parse sentence: chars 2–3
    sent_num    <- as.integer(substr(no_ext, 2, 3))
    if (is.na(sent_num) || sent_num %in% exclude_sentences) next

    # parse speaker: char 6
    speaker_num <- as.integer(substr(no_ext, 6, 6))
    if (is.na(speaker_num) || !(speaker_num %in% include_speakers)) next

    # build new name & copy
    new_name <- paste0("greek_", emotion_prefix[[letter]], fname)
    file.copy(wav,
              file.path(target_dir, new_name),
              overwrite = TRUE)
  }
}

```

## Canadian French

task: add speaker 3, 5, 8, 10’s sentences 1, 5, 6 (cus currently only has 2 3 4)

```{r}
#here is the idea
# 0) set your source + target directories
source_dir <- "C:/Users/yuka/Desktop/QP1/CaFE_48k"
target_dir <- "C:/Users/yuka/Desktop/linguist245B_project/experiment/stim/additional_items_temploc"

# 1) which emotion folders (in French), and the subfolder we want
emotion_folders <- c("Colère", "Joie", "Neutre", "Peur", "Surprise", "Tristesse")
subfolder      <- "Fort"

# 2) mapping from French‐letter to English prefix
prefix_map <- c(
  C = "angry__",    # Colere
  J = "happy__",    # Joie
  N = "neutral__",  # Neutre
  P = "fear__",     # Peur
  S = "surprise__", # Surprise
  T = "sad__"       # Tristesse
)

# 3) which speakers & sentences to keep
include_speakers <- c("03","05","08","10")
include_sentences <- c("1","5","6")

# 4) walk through each emotion
for (emo in emotion_folders) {
  emo_dir <- file.path(source_dir, emo, subfolder)
  if (!dir.exists(emo_dir)) next
  
  # list all .wav files
  wavs <- list.files(emo_dir, pattern="\\.wav$", full.names=TRUE)
  
  for (src in wavs) {
    fn <- basename(src)                 # e.g. "03-C-2-5.wav"
    parts <- strsplit(tools::file_path_sans_ext(fn), "-", fixed=TRUE)[[1]]
    # expect exactly 4 parts: speaker, letter, "2", sentence
    if (length(parts) != 4) next
    speaker <- parts[1]
    letter  <- parts[2]
    mid     <- parts[3]
    sent    <- parts[4]
    
    # filter by speaker, by the fixed "2", and by sentence
    if (!(speaker %in% include_speakers)) next
    if (mid != "2")                      next
    if (!(sent %in% include_sentences)) next
    
    # look up the right prefix
    if (!(letter %in% names(prefix_map))) next
    eng_pref <- prefix_map[letter]
    
    # build new name and copy
    new_fn <- paste0("french_", eng_pref, fn)
    file.copy(src,
              file.path(target_dir, new_fn),
              overwrite = TRUE)
  }
}

```

## Japanese

task: add alll the other regular sentences for each emotion from all speakers. (meaning, cut all of them first on praat. (here now– Praat cannot load all 720 items at one time so doing by emotion, starting from anger)

```{r}
# 0) set your source + target directories
source_root <- "C:/Users/yuka/Desktop/QP1/jvnv_ver1/jvnv_v1"
target_dir  <- "C:/Users/yuka/Desktop/linguist245B_project/experiment/stim/jp_raw2"

if (!dir.exists(target_dir)) {
  dir.create(target_dir, recursive = TRUE)
}

# 1) speakers and emotions
speakers   <- c("F1", "F2", "M1", "M2")
skip_emo   <- "disgust"
valid_em   <- c("anger", "fear", "happy", "sad", "surprise")  # folder names
prefix_map <- c(
  anger    = "angry__",
  happy    = "happy__",
  fear     = "fear__",
  surprise = "surprise__",
  sad      = "sad__"
)

# 2) which sentence numbers to keep
keep_range <- 4:40

# 3) traverse
for (spk in speakers) {
  spk_dir <- file.path(source_root, spk)
  if (!dir.exists(spk_dir)) next

  # find all emotion subfolders except "disgust"
  emos <- list.dirs(spk_dir, full.names = FALSE, recursive = FALSE)
  emos <- setdiff(emos, skip_emo)

  for (emo in emos) {
    if (!(emo %in% valid_em)) next

    reg_dir <- file.path(spk_dir, emo, "regular")
    if (!dir.exists(reg_dir)) next

    # list .wav files
    wavs <- list.files(reg_dir, pattern = "\\.wav$", full.names = TRUE)
    for (src in wavs) {
      fn <- basename(src)                             # e.g. "F1_anger_regular_04.wav"
      parts <- strsplit(tools::file_path_sans_ext(fn), "_", fixed = TRUE)[[1]]
      # expect: parts = c(speaker, emotion, "regular", sent_str)
      if (length(parts) != 4) next

      emo_tag <- parts[2]
      sent_str <- parts[4]
      sent_num <- as.integer(sent_str)                # "04" -> 4

      # filter by sentence range
      if (is.na(sent_num) || !(sent_num %in% keep_range)) next

      # rename & copy
      prefix <- prefix_map[emo_tag]
      new_fn <- paste0("japanese_", prefix, fn)
      file.copy(src,
                file.path(target_dir, new_fn),
                overwrite = TRUE)
    }
  }
}

```

After all these, normalize intensities. (again, Praat)

Then add these new files in to the experiment.html code.

Set a new rule to get a list of files so that one person sees only a set amount of sounds.

## —Results Processing—

```{r}
getwd()

```

```{r}
setwd("C:/Users/yuka/Desktop/linguist245B_project/data/temp_data")
```

```{r}
data <- read.csv("C:/Users/yuka/Downloads/wecj3vb92g.csv",
                header = TRUE, sep = ",")

View(data)
```

The goal df:

response, trial num, stim filename, language, targetEmo, score

To clean up:

-   delete col1, no rt needed

-   delete col2, no raw resp needed

-   delete col3 trial type, this info not needed (but maybe needed to sort out rows)

-   delete col4 trial index, i want trial num eventually, but can add this later once row cleaned up

-   delete col5, no time needed

-   delete col6, no internal node id needed

-   delete col7, this info can be taken from another col, maybe helpful for row clean up

-   delete col8, no infor here

-   delete, col9-13, no info here

-   keep col14. this is file ID

-   keep col15, language

-   keep col16, correct_reponse, this is the target emo

-   delete col17 eventually, helpful to separate out choice vs attention, or maybe for row cleanup

-   keep col18, this is the main resp.

```{r}


library(dplyr)

cleandf <- data %>%
  filter(trial_part == "choice")


```
